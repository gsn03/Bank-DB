CREATE TABLE Agencia (
	Num_agencia   	INT PRIMARY KEY,
	Endereco      	VARCHAR(255),
	Telefone      	VARCHAR(20),
	Gerente_agencia   INT
);

CREATE TABLE Funcionario (
	Matricula     	INT PRIMARY KEY,
	Nome          	VARCHAR(100),
	Telefone      	VARCHAR(20),
	Login         	VARCHAR(50) UNIQUE,
	Senha         	VARCHAR(255),
	Endereco      	VARCHAR(255),
	Data_admissao 	DATE
);

CREATE TABLE Gerente (
	Matricula     	INT PRIMARY KEY,
	-- Herda de Funcionario
	FOREIGN KEY (Matricula) REFERENCES Funcionario(Matricula),
	aprovar_limite	BOOLEAN
);

CREATE TABLE Administrativo (
	Matricula     	INT PRIMARY KEY,
	Setor         	VARCHAR(50),
	Nivel_acesso  	INT,
	gerente_resp  	INT,
	Num_agencia   	INT,
	FOREIGN KEY (Matricula) REFERENCES Funcionario(Matricula),
	FOREIGN KEY (Num_agencia) REFERENCES Agencia(Num_agencia)
);

CREATE TABLE Cliente (
    ID SERIAL PRIMARY KEY,
    CPF VARCHAR(14) UNIQUE,
    CNPJ VARCHAR(18) UNIQUE,
    Endereco VARCHAR(255),
    Telefone VARCHAR(20),
    CHECK (
        (CPF IS NOT NULL AND CNPJ IS NULL) OR 
        (CPF IS NULL AND CNPJ IS NOT NULL)
    )
);



CREATE TABLE Pessoa_Fisica (
    CPF VARCHAR(14) PRIMARY KEY,
    Nome_completo VARCHAR(100),
    Data_nasc DATE,
    FOREIGN KEY (CPF) REFERENCES Cliente(CPF)
);

CREATE TABLE Pessoa_Juridica (
    CNPJ VARCHAR(18) PRIMARY KEY,
    Razao_social VARCHAR(100),
    FOREIGN KEY (CNPJ) REFERENCES Cliente(CNPJ)
);


CREATE TABLE Dependente (
    Nome_dependente   VARCHAR(100),
    Endereco          VARCHAR(255),
    Telefone          VARCHAR(20),
    CPF_responsavel   VARCHAR(14),
    PRIMARY KEY (Nome_dependente, CPF_responsavel),
    FOREIGN KEY (CPF_responsavel) REFERENCES Pessoa_Fisica(CPF)
);


-- CONTAS
CREATE TABLE Contas (
	Num_conta       INT PRIMARY KEY,
	tipo            VARCHAR(10)  NOT NULL CHECK (tipo IN ('corrente', 'poupanca')),
	limite          DECIMAL(12,2),
	Aberta_por      INT,
	Saldo           DECIMAL(12,2),
	Data_abertura   DATE,
	Cpf_cliente     VARCHAR(14),
	Cnpj_cliente    VARCHAR(18),

	-- Regra: ou é CPF ou é CNPJ, nunca os dois
	CHECK (
		(Cpf_cliente IS NOT NULL AND Cnpj_cliente IS NULL)
		OR
		(Cpf_cliente IS NULL AND Cnpj_cliente IS NOT NULL)
	),

	FOREIGN KEY (Aberta_por) REFERENCES Funcionario(Matricula),
	FOREIGN KEY (Cpf_cliente) REFERENCES Cliente(CPF),
	FOREIGN KEY (Cnpj_cliente) REFERENCES Cliente(CNPJ)
);


CREATE OR REPLACE FUNCTION bloquear_poupanca_para_pj()
RETURNS TRIGGER AS $$
BEGIN
    -- Se a conta é poupança e está vinculada a um CNPJ → erro
    IF NEW.tipo = 'poupanca' AND NEW.Cnpj_cliente IS NOT NULL THEN
        RAISE EXCEPTION 'Pessoa Jurídica não pode abrir conta poupança.';
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_restricao_tipo_conta
BEFORE INSERT ON Contas
FOR EACH ROW
EXECUTE FUNCTION bloquear_poupanca_para_pj();

CREATE OR REPLACE FUNCTION validar_subclasse_unica()
RETURNS TRIGGER AS $$
BEGIN
    IF TG_TABLE_NAME = 'conta_corrente' THEN
        -- Se estiver tentando inserir em conta_corrente, e já existe em conta_poupanca
        IF EXISTS (SELECT 1 FROM conta_poupanca WHERE Num_conta = NEW.Num_conta) THEN
            RAISE EXCEPTION 'Essa conta já está registrada como conta poupança.';
        END IF;
    ELSIF TG_TABLE_NAME = 'conta_poupanca' THEN
        -- Se estiver tentando inserir em conta_poupanca, e já existe em conta_corrente
        IF EXISTS (SELECT 1 FROM conta_corrente WHERE Num_conta = NEW.Num_conta) THEN
            RAISE EXCEPTION 'Essa conta já está registrada como conta corrente.';
        END IF;
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER impedir_duplicidade_corrente
BEFORE INSERT ON conta_corrente
FOR EACH ROW
EXECUTE FUNCTION validar_subclasse_unica();

CREATE TRIGGER impedir_duplicidade_poupanca
BEFORE INSERT ON conta_poupanca
FOR EACH ROW
EXECUTE FUNCTION validar_subclasse_unica();




CREATE TABLE Conta_corrente (
	Num_conta INT PRIMARY KEY,
	FOREIGN KEY (Num_conta) REFERENCES Contas(Num_conta)
);

CREATE TABLE Conta_poupanca (
	Num_conta INT PRIMARY KEY,
	FOREIGN KEY (Num_conta) REFERENCES Contas(Num_conta)
);

CREATE TABLE Cartao (
	Num_cartao        VARCHAR(25) PRIMARY KEY,
	Cod_verificacao   VARCHAR(10),
	Limite            DECIMAL(12,2),
	Validade          DATE,
	Status            VARCHAR(20),
	Bandeira          VARCHAR(30),
	Tipo              VARCHAR(30),
	Conta             INT,
	FOREIGN KEY (Conta) REFERENCES Contas(Num_conta)
);

CREATE TABLE Transacao (
	id_transacao  	INT PRIMARY KEY,
	Data          	DATE,
	Hora          	TIME,
	Valor         	DECIMAL(12,2)
);

CREATE TABLE Transferencia (
	id_transacao  	INT PRIMARY KEY,
	FOREIGN KEY (id_transacao) REFERENCES Transacao(id_transacao)
);

CREATE TABLE Envia_transferencia (
	id_transferencia  INT PRIMARY KEY,
	num_corrente  	INT,
	FOREIGN KEY (id_transferencia) REFERENCES Transferencia(id_transacao),
	FOREIGN KEY (num_corrente) REFERENCES Conta_corrente(Num_conta)
);

CREATE TABLE Recebe_transferencia (
	id_transferencia  INT PRIMARY KEY,
	num_conta     	INT,
	FOREIGN KEY (id_transferencia) REFERENCES Transferencia(id_transacao),
	FOREIGN KEY (num_conta) REFERENCES Contas(Num_conta)
);

CREATE TABLE Saque (
	id_saque      	INT PRIMARY KEY,
	num_conta     	INT,
	FOREIGN KEY (num_conta) REFERENCES Contas(Num_conta)
);

CREATE TABLE Deposito (
	id_deposito   	INT PRIMARY KEY,
	num_conta     	INT,
	FOREIGN KEY (num_conta) REFERENCES Contas(Num_conta)
);


CREATE TABLE Agencia (
    Num_agencia       INT PRIMARY KEY,
    Endereco          VARCHAR(255),
    Telefone          VARCHAR(20),
    Gerente_agencia   INT UNIQUE,
    FOREIGN KEY (Gerente_agencia) REFERENCES Gerente(Matricula)
);





